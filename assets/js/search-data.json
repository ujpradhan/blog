{
  
    
        "post0": {
            "title": "US oil & gas production",
            "content": "In this post, we will plot a chart of (1) US oil production and (2) US gas production by accessing this data from EIA. . First, install the python wrapper for Energy Information Administration (EIA) API using your Command Prompt . pip install EIA_python . import pandas as pd import matplotlib.pyplot as plt %matplotlib inline . import eia . define key using your personal EIA API key . key = eia.API(&quot;Peronal API KEY&quot;) . #Browse series ID here: https://www.eia.gov/opendata/qb.php?category=371 #We&#39;ll first query for &quot;U.S. Field Production of Crude Oil, Annual&quot; with &quot;PET.MCRFPUS2.A&quot; oil = key.data_by_series(&#39;PET.MCRFPUS2.A&#39;) type(oil) #check type of data series we get back . dict . #We&#39;ll convert it into a pandas dataframe to enhance display and functionality oildf = pd.DataFrame(oil) #Observe US crude oil production over the past 10 year oil10 = oildf[-10:] oil10 . U.S. Field Production of Crude Oil, Annual (Thousand Barrels per Day) . 2010 5484 | . 2011 5667 | . 2012 6521 | . 2013 7494 | . 2014 8789 | . 2015 9446 | . 2016 8852 | . 2017 9371 | . 2018 10964 | . 2019 12248 | . oil10 = oil10/1000 oil10 . U.S. Field Production of Crude Oil, Annual (Thousand Barrels per Day) . 2010 5.484 | . 2011 5.667 | . 2012 6.521 | . 2013 7.494 | . 2014 8.789 | . 2015 9.446 | . 2016 8.852 | . 2017 9.371 | . 2018 10.964 | . 2019 12.248 | . #We&#39;ll query for &quot;U.S. Dry Natural Gas Production, Annual&quot; with &quot;NG.N9070US2.A&quot; gas = key.data_by_series(&#39;NG.N9070US2.A&#39;) gasdf = pd.DataFrame(gas) gas10 = gasdf[-10:] gas10 . U.S. Dry Natural Gas Production, Annual (Million Cubic Feet) . 2010 21315507 | . 2011 22901879 | . 2012 24033266 | . 2013 24205523 | . 2014 25889605 | . 2015 27065460 | . 2016 26592115 | . 2017 27340583 | . 2018 30774274 | . 2019 33967557 | . gas10 = gas10/(1000*365) gas10 . U.S. Dry Natural Gas Production, Annual (Million Cubic Feet) . 2010 58.398649 | . 2011 62.744874 | . 2012 65.844564 | . 2013 66.316501 | . 2014 70.930425 | . 2015 74.151945 | . 2016 72.855110 | . 2017 74.905707 | . 2018 84.313079 | . 2019 93.061800 | . prod = pd.concat([oil10, gas10], axis = 1) prod.columns = [&quot;oil&quot;, &quot;gas&quot;] prod . oil gas . 2010 5.484 | 58.398649 | . 2011 5.667 | 62.744874 | . 2012 6.521 | 65.844564 | . 2013 7.494 | 66.316501 | . 2014 8.789 | 70.930425 | . 2015 9.446 | 74.151945 | . 2016 8.852 | 72.855110 | . 2017 9.371 | 74.905707 | . 2018 10.964 | 84.313079 | . 2019 12.248 | 93.061800 | . fig = plt.figure() ax = fig.add_subplot(111) ax2 = ax.twinx() prod.oil.plot(kind=&#39;bar&#39;, ax = ax, width = 0.3, position = 0) prod.gas.plot(kind=&#39;bar&#39;, color = &#39;orange&#39;, ax = ax2, width = 0.3, position = 1) ax.set_ylabel(&#39;oil production (mmbpd)&#39;) ax2.set_ylabel(&#39;gas production (bcf/d)&#39;) plt.show() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-22T19:52:31.402751 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/",
            "url": "https://ujpradhan.github.io/blog/2021/01/22/US-oil-&-gas-production-with-EIA.html",
            "relUrl": "/2021/01/22/US-oil-&-gas-production-with-EIA.html",
            "date": " • Jan 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Macro charts",
            "content": "Plotting macro data from FRED . Rates: Fed Funds, 2-year, 10-year Treasury, 30-year Treasury | Equity: SPX, NASDAQ | Commodity: Brent, WTI, Natural gas, Copper | Currencies: EUR, GBP, JPY, CNY | import pandas as pd #importing pandas module import matplotlib.pyplot as plt #importing matplotlib for plotting charts %matplotlib inline import matplotlib.dates as mdates . Using fredapi in order to access FRED database. Courtesy of Mortada Meyar. . For installation: . pip install fredapi . from fredapi import Fred #fred = Fred(&quot;use personal FRED API&quot;) . begin = &#39;2017-12-31&#39; end = &#39;2021-01-15&#39; . fedfunds = fred.get_series(&#39;DFF&#39;, observation_start = begin, obervation_end = end) #daily GT2 = fred.get_series(&#39;DGS2&#39;, observation_start = begin, obervation_end = end) #daily GT10 = fred.get_series(&#39;DGS10&#39;, observation_start = begin, obervation_end = end) #daily GT30 = fred.get_series(&#39;DGS30&#39;, observation_start = begin, obervation_end = end) #daily . spx = fred.get_series(&#39;SP500&#39;, observation_start = begin, obervation_end = end) #daily nasdaq = fred.get_series(&#39;NASDAQCOM&#39;, observation_start = begin, obervation_end = end) #daily . brent = fred.get_series(&#39;DCOILBRENTEU&#39;, observation_start = begin, obervation_end = end) #daily wti = fred.get_series(&#39;DCOILWTICO&#39;, observation_start = begin, obervation_end = end) #daily hh = fred.get_series(&#39;DHHNGSP&#39;, observation_start = begin, obervation_end = end) #daily copper = fred.get_series(&#39;PCOPPUSDM&#39;, observation_start = begin, obervation_end = end) #monthly . usd_eur = fred.get_series(&#39;DEXUSEU&#39;, observation_start = begin, obervation_end = end) #daily usd_gbp = fred.get_series(&#39;DEXUSUK&#39;, observation_start = begin, obervation_end = end) #daily yen_usd = fred.get_series(&#39;DEXJPUS&#39;, observation_start = begin, obervation_end = end) #daily yuan_usd = fred.get_series(&#39;DEXCHUS&#39;, observation_start = begin, obervation_end = end) #daily . Rates . fig, axes = plt.subplots(2,2, figsize = (12, 8)) # rotate and align x-labels so they look better fig.autofmt_xdate() axes[0, 0].plot(fedfunds) axes[0, 0].set_title(&#39;Effective Fed Funds Rate&#39;) axes[0, 0].set_ylabel(&#39;%&#39;) axes[0, 1].plot(GT2) axes[0, 1].set_title(&#39;Generic 2yr Treasury Yield&#39;) axes[0, 1].set_ylabel(&#39;%&#39;) axes[1, 0].plot(GT10) axes[1, 0].set_title(&#39;Generic 10yr Treasury Yield&#39;) axes[1, 0].set_ylabel(&#39;%&#39;) axes[1, 1].plot(GT30) axes[1, 1].set_title(&#39;Generic 30yr Treasury Yield&#39;) axes[1, 1].set_ylabel(&#39;%&#39;) . Text(0, 0.5, &#39;%&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-18T20:46:40.577953 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Equities . fig, axes = plt.subplots(1, 2, figsize = (12, 4)) fig.autofmt_xdate() axes[0].plot(spx) axes[0].set_title(&#39;S&amp;P 500&#39;) axes[1].plot(nasdaq) axes[1].set_title(&#39;NASDAQ Composite&#39;) . Text(0.5, 1.0, &#39;NASDAQ Composite&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-18T20:46:41.979027 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Commodities . fig, axes = plt.subplots(2, 2, figsize = (12, 8)) fig.autofmt_xdate() axes[0, 0].plot(brent) axes[0, 0].set_title(&#39;Brent Crude Oil&#39;) axes[0, 0].set_ylabel(&#39;$/bbl&#39;) axes[0, 1].plot(wti) axes[0, 1].set_title(&#39;WTI Crude Oil&#39;) axes[0, 1].set_ylabel(&#39;$/bbl&#39;) axes[1, 0].plot(hh) axes[1, 0].set_title(&#39;Henry Hub Natural Gas&#39;) axes[1, 0].set_ylabel(&#39;$/MMBtu&#39;) axes[1, 1].plot(copper) axes[1, 1].set_title(&#39;Copper&#39;) axes[1, 1].set_ylabel(&#39;$/MT&#39;) . Text(0, 0.5, &#39;$/MT&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-18T20:46:43.310116 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Currencies . fig, axes = plt.subplots(2, 2, figsize = (12, 8)) fig.autofmt_xdate() axes[0, 0].plot(usd_eur) axes[0, 0].set_title(&#39;USD/EUR Exchange Rate&#39;) axes[0, 1].plot(usd_gbp) axes[0, 1].set_title(&#39;USD/GBP Exchange Rate&#39;) axes[1, 0].plot(yen_usd) axes[1, 0].set_title(&#39;JPY/USD Exchange Rate&#39;) axes[1, 1].plot(yuan_usd) axes[1, 1].set_title(&#39;CNY/USD Exchange Rate&#39;) . Text(0.5, 1.0, &#39;CNY/USD Exchange Rate&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-18T20:46:45.098201 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/",
            "url": "https://ujpradhan.github.io/blog/2021/01/18/Macro-charts-with-FRED.html",
            "relUrl": "/2021/01/18/Macro-charts-with-FRED.html",
            "date": " • Jan 18, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ujpradhan.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ujpradhan.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am a Research Analyst who loves working with markets and energy data. In this blog, I hope to share my side projects on jupyter notebooks. . Currently, I cover US energy infrastructure equities. I have previously worked in credit strategy and fundamental credit research roles. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ujpradhan.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ujpradhan.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}